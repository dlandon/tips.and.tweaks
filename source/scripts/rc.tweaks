#!/bin/bash
# Usage:
# apply|flow|offload|rx_buffer|tx_buffer|vm_dirty|vm_background|cpu_freq_driver|cpu_governor|set_governor.
#

apply_tweaks()
{
	OIFS=$IFS
	IFS=","
	list=($ETHERNET_NICS)
	for ((i=0; i<${#list[@]}; ++i)); do
		nic=${list[$i]}

		if [ "$FLOW_CONTROL" = "yes" ]; then
			/usr/sbin/ethtool -A $nic autoneg off rx off tx off &>/dev/null
		else
			/usr/sbin/ethtool -A $nic autoneg on rx on tx on &>/dev/null
		fi
		sleep 0.25

		if [ "$TSO_OFFLOAD" = "yes" ]; then
			/usr/sbin/ethtool -K $nic tso off &>/dev/null
			/usr/sbin/ethtool -K $nic gso off &>/dev/null
		else
			/usr/sbin/ethtool -K $nic tso on &>/dev/null
			/usr/sbin/ethtool -K $nic gso on &>/dev/null
		fi
		sleep 0.25

		/usr/sbin/ethtool -G $nic rx $RX_BUFFER &>/dev/null 
		/usr/sbin/ethtool -G $nic tx $TX_BUFFER &>/dev/null
		sleep 0.25
	done

	sysctl vm.dirty_ratio=$VM_DIRTY &>/dev/null
	sysctl vm.dirty_background_ratio=$VM_BACKGROUND &>/dev/null

	if [ ! -z $CPU_GOVERNOR ]; then
		if [ "$CPU_GOVERNOR" = "timed" ]; then
			IFS=":"
			list=($START_TIME)
			printf "# Set cpu governor to performance:\n" > /boot/config/plugins/dynamix/cpu_governor.cron
			printf "${list[1]} ${list[0]} * * * /usr/local/emhttp/plugins/tips.and.tweaks/scripts/rc.tweaks set_governor performance &> /dev/null\n\n" >> /boot/config/plugins/dynamix/cpu_governor.cron
			list=($STOP_TIME)
			printf "# Set cpu governor to powersave:\n" >> /boot/config/plugins/dynamix/cpu_governor.cron
			printf "${list[1]} ${list[0]} * * * /usr/local/emhttp/plugins/tips.and.tweaks/scripts/rc.tweaks set_governor powersave &> /dev/null\n\n" >> /boot/config/plugins/dynamix/cpu_governor.cron
		else
			# Remove dynamix set governor cron file.
			rm -f /boot/config/plugins/dynamix/cpu_governor.cron

			set_governor $CPU_GOVERNOR

			if [ "`/usr/bin/cpufreq-info -d 2>/dev/null`" == "intel_pstate" ]; then
				/usr/bin/flock -x -w 1 /sys/devices/system/cpu/intel_pstate/no_turbo -c 'echo "1" > /sys/devices/system/cpu/intel_pstate/no_turbo' &>/dev/null
			fi
		fi
	fi
	IFS=$OIFS

	if [ "$FTP_TELNET" = "yes" ]; then
		sed -i -e 's/^telnet/#telnet/;s/^ftp/#ftp/' /etc/inetd.conf
		/etc/rc.d/rc.inetd restart
	fi

	# Reload dynamix crons.
	/usr/local/sbin/update_cron

	logger "Tweaks Applied" -t$PROG_NAME
}

flow_control() {
	flow="Off"
	avail="no"
	OIFS=$IFS
	IFS=","
	list=($ETHERNET_NICS)
	for ((i=0; i<${#list[@]}; ++i)); do
		nic=${list[$i]}
		value=`/usr/sbin/ethtool -a $nic 2>/dev/null | grep -i 'RX:' | /bin/awk '{print $2}'`
		if [ ! -z $value ]; then
			if [ "$value"  == "on" ]; then
				flow="On"
			fi
			avail="yes"
		fi
	done
	IFS=$OIFS

	if [ "$avail" = "yes"  ]; then
		echo $flow
	else
		echo $not_avail
	fi
}

tso_offload() {
	offload="Off"
	avail="no"
	OIFS=$IFS
	IFS=","
	list=($ETHERNET_NICS)
	for ((i=0; i<${#list[@]}; ++i)); do
		nic=${list[$i]}
		value=`/usr/sbin/ethtool -k $nic 2>/dev/null | grep -i 'tcp-segmentation-offload:' | /bin/awk '{print $2}'`
		if [ ! -z $value ]; then
			if [ "$value"  == "on" ]; then
				offload="On"
			fi
			avail="yes"
		fi
	done
	IFS=$OIFS

	if [ "$avail" = "yes"  ]; then
		echo $offload
	else
		echo $not_avail
	fi
}

rx_buffer() {
	rx=0
	avail="no"
	OIFS=$IFS
	IFS=","
	list=($ETHERNET_NICS)
	for ((i=0; i<${#list[@]}; ++i)); do
		nic=${list[$i]}
		value=`/usr/sbin/ethtool -g $nic 2>/dev/null | grep -i 'RX:' 2>/dev/null | tr -d '\n' | /bin/awk '{print $3}'`
		if [ $value > $rx ]; then
			rx=$value
			avail="yes"
		fi
	done
	IFS=$OIFS

	if [ "$avail" = "yes"  ]; then
		echo $rx
	else
		echo $no_buffer
	fi
}

tx_buffer() {
	tx=0
	avail="no"
	OIFS=$IFS
	IFS=","
	list=($ETHERNET_NICS)
	for ((i=0; i<${#list[@]}; ++i)); do
		nic=${list[$i]}
		value=`/usr/sbin/ethtool -g $nic 2>/dev/null | grep -i 'TX:' 2</dev/null | tr -d '\n' | /bin/awk '{print $3}'`
		if [ $value > $tx ]; then
			tx=$value
			avail="yes"
		fi
	done
	IFS=$OIFS

	if [ "$avail" = "yes"  ]; then
		echo $tx
	else
		echo $no_buffer
	fi
}

vm_dirty() {
	sysctl vm.dirty_ratio
}

vm_background() {
	sysctl vm.dirty_background_ratio
}

cpu_freq_driver() {
	value=`/usr/bin/cpufreq-info -d 2>/dev/null`
	case "$value" in
		'acpi-cpufreq')
			echo "ACPI CPU Freq"
		;;
		'intel_pstate')
			echo "Intel Pstate"
		;;
		'powernow_k8')
			echo "Powernow K8/K10"
		;;
		*)
			if [ "$value" != "" ]; then
				echo $value
			else
				echo "* no driver *"
			fi
	esac
}

cpu_governor() {
	value=`/usr/bin/cpufreq-info -p  | /bin/awk '{print $3}' 2>/dev/null`
	case "$value" in
		'ondemand')
			echo "On Demand"
		;;
		'performance')
			echo "Performance"
		;;
		'powersave')
			echo "Power Save"
		;;
		'conservative')
			echo "Conservative"
		;;
		*)
			echo $value
	esac
}

set_governor() {
	cpus=`cat /proc/cpuinfo | grep processor | wc -l 2>/dev/null`
	for ((i=0; i<${cpus}; ++i)); do
		/usr/bin/cpufreq-set -c $i -g $1 &>/dev/null
	done
}

# read our configuration.
CONFIG="/boot/config/plugins/tips.and.tweaks/tips.and.tweaks.cfg"
source $CONFIG
PROG_NAME="tips.and.tweaks"

not_avail="N/A (Off)"
no_buffer="N/A"

case "$1" in
	'apply')
		apply_tweaks
	;;
	'flow')
		flow_control
	;;
	'offload')
		tso_offload
	;;
	'rx_buffer')
		rx_buffer
	;;
	'tx_buffer')
		tx_buffer
	;;
	'vm_dirty')
		vm_dirty
	;;
	'vm_background')
		vm_background
	;;
	'cpu_freq_driver')
		cpu_freq_driver
	;;
	'cpu_governor')
		cpu_governor
	;;
	'set_governor')
		set_governor $2
	;;
	*)
		echo "usage $0 apply|flow|offload|rx_buffer|tx_buffer|vm_dirty|vm_background|cpu_freq_driver|cpu_governor|set_governor"
esac
